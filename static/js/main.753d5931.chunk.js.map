{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","state","dispatcher","_React$useState3","_React$useState4","target_image","fileDispatcher","image_style","background","concat","react_default","a","createElement","className","style","onClick","lib","extensions","dims","minWidth","maxWidth","Infinity","minHeight","maxHeight","onChange","base64","fuga","console","log","onError","errMsg","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAqCeA,MAjCf,WAAe,IAAAC,EACeC,IAAMC,SAAS,GAD9BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACNM,EADMH,EAAA,GACCI,EADDJ,EAAA,GAAAK,EAE0BP,IAAMC,SAAS,MAFzCO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEQE,EAFRF,EAAA,GAIPG,EAAc,CAClBC,WAAU,OAAAC,OAASJ,EAAT,6BAOZ,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,mBAAAJ,OAA+B,IAAVR,EAAc,WAAwB,IAAVA,EAAc,GAAK,UAAaa,MAAwB,OAAjBT,EAAwBE,EAAc,KAC5IG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASE,QAAS,kBAAMb,EAAWD,EAAQ,GAAK,EAAIA,EAAQ,EAAIA,KAAlF,sBACAS,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASE,QAAS,kBAAMb,EAAWD,EAAQ,GAAK,EAAIA,EAAQ,EAAIA,KAAlF,mCAEFS,EAAAC,EAAAC,cAACI,EAAA,YAAD,CACEC,WAAY,CAAC,MAAO,OAAQ,OAC5BC,KAAM,CAACC,SAAU,EAAGC,SAAUC,IAAUC,UAAW,EAAGC,UAAWF,KACjEG,SAAU,SAAAC,GAAM,OAdRC,EAciBD,EAb7BE,QAAQC,IAAIF,QACZpB,EAAeoB,GAFJ,IAACA,GAeRG,QAAS,SAAAC,GAAM,OAAIH,QAAQC,IAAIE,KAEjCpB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAlB,4BCjBckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.753d5931.chunk.js","sourcesContent":["import React from 'react';\nimport {ImagePicker} from 'react-file-picker';\nimport './App.css';\n\nfunction App() {\n  const [state, dispatcher] = React.useState(0);\n  const [target_image, fileDispatcher] = React.useState(null);\n\n  const image_style = {\n    background: `url(${target_image}) center/cover no-repeat`,\n  };\n\n  const hoge = (fuga) => {\n    console.log(fuga);\n    fileDispatcher(fuga);\n  }\n  return (\n    <div className=\"App\">\n      <div className={`image-container ${state === 0 ? 'triangle' : (state === 1 ? '' : 'circle')}`} style={target_image !== null ? image_style : {}} />\n      <div className=\"controller\">\n        <button className=\"button\" onClick={() => dispatcher(state + 1 <= 2 ? state + 1 : state)}>転がる</button>\n        <button className=\"button\" onClick={() => dispatcher(state - 1 >= 0 ? state - 1 : state)}>転がらない</button>\n      </div>\n      <ImagePicker\n        extensions={['jpg', 'jpeg', 'png']}\n        dims={{minWidth: 1, maxWidth: Infinity, minHeight: 1, maxHeight: Infinity}}\n        onChange={base64 => hoge(base64)}\n        onError={errMsg => console.log(errMsg)}\n      >\n      <button className=\"uploader button\">\n        Click to upload image\n      </button>\n      </ImagePicker>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}